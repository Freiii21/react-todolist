{"version":3,"sources":["features/Login/Login.module.css","components/ErrorSnackbar.module.css","serviceWorker.ts","api/todolist-api.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","Task.tsx","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","TodoList.tsx","components/ErrorSnackbar.tsx","features/Login/Login.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","style","width","size","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","disabled","entityStatus","IconButton","onClick","color","AddBox","fontSize","EditableSpan","editMode","setEditMode","onBlur","setNewTitle","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","post","todolistId","delete","params","put","taskId","model","authAPI","data","Task","ListItem","disableGutters","className","task","status","Completed","divider","display","justifyContent","padding","Checkbox","e","changeTaskStatus","id","checked","New","changeTaskTitle","removeTask","Delete","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleserverAppError","messages","length","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodoListAC","index","findIndex","t","splice","addTodoListAC","unshift","todolist","filter","changeTodoListAC","changeTodoListFilterAC","setTodosAC","todolists","map","tl","changeTodoListEntityStatusAC","todolistsReducer","removeTaskAC","tasks","addTaskAC","todoListId","updateTaskAC","domainModel","setTasksAC","todoId","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","deadline","description","priority","startDate","then","res","resultCode","TodoList","useDispatch","useEffect","items","tasksForRender","tasksJSXElements","addTask","useCallback","filterAll","changeFilter","filterActive","filterComplete","Typography","align","fontWeight","changeTodolistTitle","removeTodolist","List","ButtonGroup","Button","Alert","forwardRef","ref","elevation","ErrorSnackbar","useSelector","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","s","alert","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","catch","err","resetForm","to","container","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","button","TodolistsBlock","Grid","addTodolist","spacing","todolistsComponents","AppWithRedux","finally","todos","taskID","todolistID","addTaskTC","changeTodolistTitleTC","addTodolistTC","position","top","textAlign","CircularProgress","Paper","AppBar","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.d4e9cabf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMe\":\"Login_rememberMe__3xNMV\",\"button\":\"Login_button__vDBYk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"ErrorSnackbar_alert__1zk2G\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\" : \"419c229b-43d4-438c-9dc1-973ee316752b\"\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTodolists(){\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(params: {todolistId: string, title: string}){\r\n        return instance.put<ResponseType>(`todo-lists/${params.todolistId}`, {title: params.title})\r\n    },\r\n    getTasks(todolistId: string){\r\n        return instance.get<ResponseTaskType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(params: {title: string, todolistId: string}){\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${params.todolistId}/tasks`, {title: params.title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"auth/login\", data)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{ dat: ResponseMeType }>>(\"/auth/me\")\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>(\"auth/login\")\r\n    }\r\n\r\n}\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    capcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldsError: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n   New ,\r\n   InProgress,\r\n   Completed,\r\n   Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype ResponseTaskType = {\r\n    error: string\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title:string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {                  // string with any value true and empty string is false\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    };\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false);\r\n    }\r\n\r\n    const addTaskUsingEnter = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                style={{width:\"180px\"}}\r\n                size={'small'}\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={addTaskUsingEnter}\r\n                label={\"Title\"}\r\n                error={error}\r\n                helperText={error && \"title is required!\"}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n{/*            <input\r\n                style={error ? errorInputStyle : undefined}\r\n                className={error ? 'error' : ''}\r\n                value={title}\r\n                placeholder=\"Enter a value...\"\r\n                onChange={changeTitle}\r\n                onKeyPress={addTaskUsingEnter}\r\n            />*/}\r\n            <IconButton onClick={addItem} color={\"primary\"} size={\"small\"} disabled={props.entityStatus === 'loading'}>\r\n                <AddBox fontSize={\"large\"}/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n","import React, {useState, ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title);\r\n    }\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                style={{width: '130px'}}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton, ListItem} from '@material-ui/core';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\n\r\n\r\nexport type TaskPropsType ={\r\n    task: TaskType\r\n    todolistId:string\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n    const removeTask = () => props.removeTask(props.task.id, props.todolistId);\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ?\r\n            TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const changeTitle = (title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todolistId)\r\n    }\r\n\r\n    return (\r\n        <ListItem\r\n            disableGutters\r\n            className={props.task.status === TaskStatuses.Completed ? 'is-Done' : ''}\r\n            divider\r\n            key={props.task.id}\r\n            style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                padding: \"0px\"\r\n            }}\r\n        >\r\n            <Checkbox\r\n                color={\"primary\"}\r\n                onChange={changeStatus}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan title={props.task.title} setNewTitle={changeTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})","import { Dispatch } from 'redux';\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\r\n    dispatch(setAppErrorAC({error:message}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleserverAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolist-api';\r\nimport {handleserverAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {AxiosError} from 'axios';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>){\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC} = slice.actions;\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            } else {\r\n                handleserverAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            }\r\n        )\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n            } else {\r\n                handleserverAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            }\r\n        )\r\n}\r\n","import {authAPI} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC:(state,action: PayloadAction<{error: string | null}>) => {\r\n            state.error = action.payload.error;\r\n        },\r\n        setAppStatusAC:(state,action: PayloadAction<{status: RequestStatusType}>) => {\r\n            state.status = action.payload.status;\r\n        },\r\n        setIsInitializedAC:(state,action: PayloadAction<{isInitialized: boolean}>) => {\r\n            state.isInitialized = action.payload.isInitialized;\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatusAC, setAppErrorAC, setIsInitializedAC} = slice.actions;\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}));\r\n            } else {\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC({isInitialized: true}))\r\n        })\r\n}","import {Dispatch} from 'redux';\r\nimport {todolistApi, TodolistType} from '../api/todolist-api';\r\nimport {AppRootStateType} from './store';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleserverAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodoListAC:(state,action: PayloadAction<{id: string}>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodoListAC:(state,action: PayloadAction<{todolist: TodolistType}>) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all',entityStatus: 'idle'})\r\n        },\r\n        changeTodoListAC:(state,action: PayloadAction<{id: string, title: string}>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        },\r\n        changeTodoListFilterAC:(state,action: PayloadAction<{id: string, filter: FilterValuesType}>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        setTodosAC:(state,action: PayloadAction<{todolists: Array<TodolistType>}>) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        changeTodoListEntityStatusAC:(state,action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {removeTodoListAC, addTodoListAC, changeTodoListAC, changeTodoListFilterAC, setTodosAC,\r\n    changeTodoListEntityStatusAC} = slice.actions;\r\n\r\n\r\nexport const fetchTodoslistsTC = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n            let todos = res.data;\r\n            dispatch(setTodosAC({todolists:todos}));\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistApi.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status:'succeeded'}))\r\n                    dispatch(addTodoListAC({todolist:res.data.data.item}));\r\n                } else {\r\n                    handleserverAppError<{item: TodolistType}>(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n                    // dispatch(setAppErrorAC(err.message))\r\n                    // dispatch(setAppStatusAC('failed'))\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        dispatch(changeTodoListEntityStatusAC({id:todolistId, entityStatus:'loading'}))\r\n        todolistApi.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    dispatch(setAppStatusAC({status:'succeeded'}))\r\n                    dispatch(removeTodoListAC({id:todolistId}))\r\n                } else {\r\n                    dispatch(setAppStatusAC({status:'failed'}))\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC({error:res.data.messages[0]}))\r\n                    } else {\r\n                        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n                    }\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistApi.updateTodolist({todolistId:id, title:title})\r\n            .then((res) => {\r\n                dispatch(changeTodoListAC({id:id, title:title}))\r\n            })\r\n    }\r\n}\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistApi, UpdateTaskModelType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from './store';\r\nimport {setAppStatusAC} from '../app/app-reducer';\r\nimport {TasksStateType} from '../app/AppWithRedux';\r\nimport {AxiosError} from 'axios';\r\nimport {handleserverAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {addTodoListAC, removeTodoListAC, setTodosAC} from './todolists-reducer';\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState: initialState,\r\n        reducers: {\r\n            removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1);\r\n                }\r\n            },\r\n            addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n                state[action.payload.task.todoListId].unshift(action.payload.task);\r\n            },\r\n            updateTaskAC: (state, action: PayloadAction<{ taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel};\r\n                }\r\n            },\r\n            setTasksAC: (state, action: PayloadAction<{ tasks: TaskType[], todoId: string }>) => {\r\n                state[action.payload.todoId] = action.payload.tasks;\r\n            },\r\n        },\r\n        extraReducers: (builder)=>{\r\n            builder.addCase(addTodoListAC, (state, action)=>{\r\n                state[action.payload.todolist.id] = [];\r\n            });\r\n            builder.addCase(removeTodoListAC, (state, action)=>{\r\n                delete state[action.payload.id];\r\n            });\r\n            builder.addCase(setTodosAC, (state, action)=>{\r\n                action.payload.todolists.forEach((tl) => {\r\n                    state[tl.id] = [];\r\n                })\r\n            });\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer;\r\nexport const {removeTaskAC,addTaskAC,updateTaskAC,setTasksAC} = slice.actions;\r\n\r\nexport const fetchTasksTC = (todoId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistApi.getTasks(todoId)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n                let tasks = res.data.items;\r\n                dispatch(setTasksAC({tasks:tasks, todoId:todoId}))\r\n            })\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todoId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistApi.deleteTask(todoId, taskId)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC({taskId:taskId, todolistId:todoId}))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todoId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistApi.createTask({title: title, todolistId: todoId})\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC({status:'succeeded'}))\r\n                    dispatch(addTaskAC({task:res.data.data.item}))\r\n                } else {\r\n                    handleserverAppError<{item: TaskType}>(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const updateTaskTC = (todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model: UpdateTaskModelType = {\r\n                title: task.title,\r\n                status: task.status,\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                ...domainModel\r\n            }\r\n            todolistApi.updateTask(todoId, taskId, model)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC({taskId:taskId, domainModel:domainModel, todolistId:todoId}))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Button, ButtonGroup, IconButton, List, Typography} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {FilterValuesType} from './state/todolists-reducer';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\nimport {fetchTasksTC} from './state/tasks-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RequestStatusType} from './app/app-reducer';\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n\r\n    let tasksForRender: Array<TaskType> = props.tasks;\r\n    if (props.filter === 'active') {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const tasksJSXElements = tasksForRender.map(task => {\r\n        return (\r\n           <Task key={task.id}\r\n                 todolistId={props.id}\r\n                 task={task}\r\n                 removeTask={props.removeTask}\r\n                 changeTaskStatus={props.changeTaskStatus}\r\n                 changeTaskTitle={props.changeTaskTitle}/>\r\n        )\r\n    })\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.addTask, props.id]);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const filterAll = useCallback(() => props.changeFilter('all', props.id), [props.id])\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const filterActive = useCallback(() => props.changeFilter('active', props.id), [props.id])\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const filterComplete = useCallback(() => props.changeFilter('completed', props.id), [props.id])\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"todoList\">\r\n            <Typography variant={'h6'} align={\"center\"} style={{fontWeight: 'bold'}}>\r\n                <EditableSpan title={props.title} setNewTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={() => props.removeTodolist(props.id)} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n            <List>\r\n                {tasksJSXElements}\r\n            </List>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={'contained'}\r\n                    size={'small'}\r\n                >\r\n                    <Button\r\n                        color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                        onClick={filterAll}>All\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                        onClick={filterActive}>Active\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        onClick={filterComplete}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {setAppErrorAC} from '../app/app-reducer';\r\nimport s from \"./ErrorSnackbar.module.css\"\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, String | null>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null}\r\n                  autoHideDuration={10000}\r\n                  onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" color=\"error\" sx={{width: '100%'}} className={s.alert}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LoginParamsType} from '../../api/todolist-api';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport s from './Login.module.css';\r\n\r\n// type FormikErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"capcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password length must be 3 or longer';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        }\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        }\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          className={s.rememberMe}\r\n                                          control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'} className={s.button}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport TodoList from '../TodoList';\r\nimport {AddItemForm} from '../components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodoListFilterAC, changeTodolistTitleTC,\r\n    fetchTodoslistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../state/todolists-reducer';\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from '../state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {TaskStatuses, TaskType} from '../api/todolist-api';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar';\r\nimport {Login} from '../features/Login/Login';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return;\r\n        }\r\n        dispatch(fetchTodoslistsTC())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [isLoggedIn])\r\n\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n        let action = removeTaskTC(taskID, todolistID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistID: string) => {\r\n        dispatch(addTaskTC(title, todolistID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todolistID: string) => {\r\n        //let action = changeTaskStatusAC(taskID,status,todolistID);\r\n        dispatch(updateTaskTC(todolistID, taskID, {status: status}));\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todolistID: string) => {\r\n        let action = updateTaskTC(todolistID, taskID, {title: title},);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        let action = changeTodoListFilterAC({id:todolistID, filter:filter});\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, todolistID: string) => {\r\n        let action = changeTodolistTitleTC(todolistID, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        let action = removeTodolistTC(todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        let action = addTodolistTC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    const todolistsComponents = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={8} style={{padding: '20px'}}>\r\n                    <TodoList\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        entityStatus={tl.entityStatus}\r\n                        tasks={tasks[tl.id]}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar style={{justifyContent: 'space-between'}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" style={{width:\"106px\"}}>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" variant={'outlined'} onClick={logoutHandler}>Logout</Button>}\r\n                        {!isLoggedIn && <div style={{width:\"94px\"}}/>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsBlock addTodolist={addTodolist}\r\n                                                            todolistsComponents={todolistsComponents}/>}\r\n                        />\r\n                        <Route path=\"login\" element={<Login/>}/>\r\n                        <Route path=\"404\" element={<h1 style={{textAlign: 'center'}}>404 page not found</h1>}/>\r\n                        <Route path=\"*\" element={<Navigate to={\"404\"}/>}/>\r\n                    </Routes>\r\n                </Container>\r\n\r\n                <ErrorSnackbar/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype TodolistsBlockPropsType = {\r\n    addTodolist: (title: string) => void\r\n    todolistsComponents: JSX.Element[]\r\n}\r\n\r\nconst TodolistsBlock = (props:TodolistsBlockPropsType) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '29px 0px'}}>\r\n                <AddItemForm addItem={props.addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {props.todolistsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from '../app/app-reducer';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <AppWithRedux/>\r\n        </HashRouter>\r\n    </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}