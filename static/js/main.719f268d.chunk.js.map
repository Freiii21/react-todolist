{"version":3,"sources":["components/ErrorSnackbar.module.css","serviceWorker.ts","api/todolist-api.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","Task.tsx","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","TodoList.tsx","components/ErrorSnackbar.tsx","features/Login/Login.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx","features/Login/Login.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","style","width","size","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","disabled","entityStatus","IconButton","onClick","color","AddBox","fontSize","EditableSpan","editMode","setEditMode","onBlur","setNewTitle","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","post","todolistId","delete","params","put","taskId","model","authAPI","data","securityAPI","Task","ListItem","disableGutters","className","task","status","Completed","divider","display","justifyContent","padding","Checkbox","e","changeTaskStatus","id","checked","New","changeTaskTitle","removeTask","Delete","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleserverAppError","messages","length","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","setCaptchaSuccessAC","isLoggedIn","getCaptchaUrlTC","rejectWithValue","errors","fieldsError","undefined","logoutTC","captcha","url","slice","createSlice","name","initialState","captchaUrl","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTodoslistsTC","todos","todolists","removeTodolistTC","changeTodoListEntityStatusAC","addTodolistTC","todolist","item","changeTodolistTitleTC","changeTodoListFilterAC","index","findIndex","t","filter","map","tl","splice","unshift","todolistsReducer","fetchTasksTC","todoId","tasks","items","removeTaskTC","addTaskTC","updateTaskTC","getState","find","deadline","description","priority","startDate","domainModel","tasksReducer","forEach","todoListId","TodoList","useDispatch","useEffect","tasksForRender","tasksJSXElements","addTask","useCallback","filterAll","changeFilter","filterActive","filterComplete","Typography","align","fontWeight","changeTodolistTitle","removeTodolist","List","ButtonGroup","Button","Alert","forwardRef","ref","elevation","ErrorSnackbar","useSelector","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","s","alert","Login","auth","captchaValue","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","to","container","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","button","src","alt","captchaInput","TodolistsBlock","Grid","addTodolist","spacing","todolistsComponents","AppWithRedux","taskID","todolistID","position","top","textAlign","CircularProgress","Paper","AppBar","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.719f268d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"ErrorSnackbar_alert__1zk2G\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\" : \"419c229b-43d4-438c-9dc1-973ee316752b\"\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTodolists(){\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(params: {todolistId: string, title: string}){\r\n        return instance.put<ResponseType>(`todo-lists/${params.todolistId}`, {title: params.title})\r\n    },\r\n    getTasks(todolistId: string){\r\n        return instance.get<ResponseTaskType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(params: {title: string, todolistId: string}){\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${params.todolistId}/tasks`, {title: params.title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"auth/login\", data)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{ dat: ResponseMeType }>>(\"/auth/me\")\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>(\"auth/login\")\r\n    }\r\n\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl () {\r\n        // return instance.get<{url:string}>('security/get-captcha-url')\r\n        return instance.get('security/get-captcha-url')\r\n    },\r\n}\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldsError?: Array<{field: string, error: string}>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n   New ,\r\n   InProgress,\r\n   Completed,\r\n   Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype ResponseTaskType = {\r\n    error: string\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title:string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {                  // string with any value true and empty string is false\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    };\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false);\r\n    }\r\n\r\n    const addTaskUsingEnter = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                style={{width:\"180px\"}}\r\n                size={'small'}\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={addTaskUsingEnter}\r\n                label={\"Title\"}\r\n                error={error}\r\n                helperText={error && \"title is required!\"}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n{/*            <input\r\n                style={error ? errorInputStyle : undefined}\r\n                className={error ? 'error' : ''}\r\n                value={title}\r\n                placeholder=\"Enter a value...\"\r\n                onChange={changeTitle}\r\n                onKeyPress={addTaskUsingEnter}\r\n            />*/}\r\n            <IconButton onClick={addItem} color={\"primary\"} size={\"small\"} disabled={props.entityStatus === 'loading'}>\r\n                <AddBox fontSize={\"large\"}/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n","import React, {useState, ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title);\r\n    }\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                style={{width: '130px'}}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton, ListItem} from '@material-ui/core';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\n\r\n\r\nexport type TaskPropsType ={\r\n    task: TaskType\r\n    todolistId:string\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n    const removeTask = () => props.removeTask(props.task.id, props.todolistId);\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ?\r\n            TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const changeTitle = (title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todolistId)\r\n    }\r\n\r\n    return (\r\n        <ListItem\r\n            disableGutters\r\n            className={props.task.status === TaskStatuses.Completed ? 'is-Done' : ''}\r\n            divider\r\n            key={props.task.id}\r\n            style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                padding: \"0px\"\r\n            }}\r\n        >\r\n            <Checkbox\r\n                color={\"primary\"}\r\n                onChange={changeStatus}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan title={props.task.title} setNewTitle={changeTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})","import { Dispatch } from 'redux';\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\r\n    dispatch(setAppErrorAC({error:message}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleserverAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n}","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, securityAPI} from '../../api/todolist-api';\r\nimport {handleserverAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport const loginTC = createAsyncThunk(\"auth/login\", async (param:LoginParamsType, thunkAPI)=>{\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setCaptchaSuccessAC())\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true};\r\n        } else {\r\n            if (res.data.resultCode === 10){\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                handleserverAppError(thunkAPI.dispatch, res.data)\r\n                thunkAPI.dispatch(getCaptchaUrlTC());\r\n                return {isLoggedIn: false};\r\n            } else {\r\n                handleserverAppError(thunkAPI.dispatch, res.data)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsError: res.data.fieldsError});\r\n            }\r\n        }\r\n    } catch(error: any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({errors: [error], fieldsError: undefined});\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk(\"auth/logout\",async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        const res = await authAPI.logout();\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return;\r\n        } else {\r\n            handleserverAppError(thunkAPI.dispatch, res.data)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch(error:any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const getCaptchaUrlTC = createAsyncThunk(\"auth/getCaptchaUrl\",async (param, thunkAPI) => {\r\n    try {\r\n        const res = await securityAPI.getCaptchaUrl();\r\n        if (res.status === 200) {\r\n            const captcha = res.data.url;\r\n            return {captcha};\r\n        } else {\r\n            handleserverAppError(thunkAPI.dispatch, res.data)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch(error:any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false,\r\n        captchaUrl: \"\"\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>){\r\n            state.isLoggedIn = action.payload.value;\r\n        },\r\n        setCaptchaSuccessAC(state){\r\n            state.captchaUrl = \"\";\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn;\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n        builder.addCase(getCaptchaUrlTC.fulfilled, (state, action) => {\r\n            state.captchaUrl = action.payload.captcha\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer;\r\nexport const {setIsLoggedInAC, setCaptchaSuccessAC} = slice.actions;\r\n\r\n\r\n","import {authAPI} from '../api/todolist-api';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\nexport const initializeAppTC = createAsyncThunk(\"app/initializeApp\",async (param,thunkAPI) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        thunkAPI.dispatch(setIsLoggedInAC({value: true}));\r\n    }\r\n    return;\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC:(state,action: PayloadAction<{error: string | null}>) => {\r\n            state.error = action.payload.error;\r\n        },\r\n        setAppStatusAC:(state,action: PayloadAction<{status: RequestStatusType}>) => {\r\n            state.status = action.payload.status;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state)=>{\r\n            state.isInitialized = true;\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions;\r\n","import {todolistApi, TodolistType} from '../api/todolist-api';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {handleServerNetworkError} from '../utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\nexport const fetchTodoslistsTC = createAsyncThunk(\"todolists/fetchTodolists\",async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        const res = await todolistApi.getTodolists();\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        let todos = res.data;\r\n        return {todolists: todos};\r\n    } catch (error: any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const removeTodolistTC = createAsyncThunk(\"todolists/removeTodolist\",async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodoListEntityStatusAC({id: todolistId, entityStatus: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.deleteTodolist(todolistId);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {id: todolistId}\r\n            // thunkAPI.dispatch(removeTodoListAC({id: todolistId}))\r\n        } else {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'failed'}))\r\n            if (res.data.messages.length) {\r\n                thunkAPI.dispatch(setAppErrorAC({error: res.data.messages[0]}))\r\n                return thunkAPI.rejectWithValue({})\r\n            } else {\r\n                thunkAPI.dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const addTodolistTC = createAsyncThunk(\"todolists/addTodolist\",async (title: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        const res = await todolistApi.createTodolist(title);\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return{todolist: res.data.data.item};\r\n        } else {\r\n            thunkAPI.dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch( error: any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const changeTodolistTitleTC = createAsyncThunk(\"todolists/changeTodolistTitle\",\r\n    async (param:{id: string, title: string}, thunkAPI) => {\r\n    try {\r\n        await todolistApi.updateTodolist({todolistId: param.id, title: param.title});\r\n        return {id: param.id, title: param.title};\r\n    } catch (error: any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n    // thunkAPI.dispatch(changeTodoListAC({id:id, title:title}))\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        // removeTodoListAC:(state,action: PayloadAction<{id: string}>) => {\r\n        //     const index = state.findIndex(t => t.id === action.payload.id);\r\n        //     if (index > -1) {\r\n        //         state.splice(index, 1);\r\n        //     }\r\n        // },\r\n        // addTodoListAC:(state,action: PayloadAction<{todolist: TodolistType}>) => {\r\n        //     state.unshift({...action.payload.todolist, filter: 'all',entityStatus: 'idle'})\r\n        // },\r\n        // changeTodoListAC:(state,action: PayloadAction<{id: string, title: string}>) => {\r\n        //     const index = state.findIndex(t => t.id === action.payload.id);\r\n        //     state[index].title = action.payload.title;\r\n        // },\r\n        changeTodoListFilterAC:(state,action: PayloadAction<{id: string, filter: FilterValuesType}>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodoListEntityStatusAC:(state,action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.entityStatus;\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodoslistsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        })\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all',entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(t => t.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer;\r\nexport const {changeTodoListFilterAC, changeTodoListEntityStatusAC} = slice.actions;\r\n\r\n\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistApi, UpdateTaskModelType} from '../api/todolist-api';\r\nimport {AppRootStateType} from './store';\r\nimport {setAppStatusAC} from '../app/app-reducer';\r\nimport {TasksStateType} from '../app/AppWithRedux';\r\nimport {handleserverAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {addTodolistTC, fetchTodoslistsTC, removeTodolistTC} from './todolists-reducer';\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const fetchTasksTC = createAsyncThunk(\"task/fetchTasks\", async (todoId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    const res = await todolistApi.getTasks(todoId);\r\n    thunkAPI.dispatch(setAppStatusAC({status:'succeeded'}))\r\n    let tasks = res.data.items;\r\n    return {tasks:tasks, todoId:todoId};\r\n})\r\nexport const removeTaskTC = createAsyncThunk(\"task/removeTask\",async (param: {taskId: string, todoId: string}, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    await todolistApi.deleteTask(param.todoId, param.taskId);\r\n    thunkAPI.dispatch(setAppStatusAC({status:'succeeded'}))\r\n    return {taskId:param.taskId, todolistId:param.todoId};\r\n})\r\nexport const addTaskTC = createAsyncThunk(\"task/addTask\",async (param: {title: string, todoId: string}, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistApi.createTask({title: param.title, todolistId: param.todoId})\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item;\r\n        } else {\r\n            handleserverAppError<{ item: TaskType }>(thunkAPI.dispatch, res.data)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    }catch(error: any) {\r\n        handleServerNetworkError(thunkAPI.dispatch, error)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk(\"task/updateTask\",\r\n    async (param:{todoId: string, taskId: string, domainModel: UpdateDomainTaskModelType},thunkAPI) => {\r\n        const state = thunkAPI.getState() as AppRootStateType;\r\n        const task = state.tasks[param.todoId].find(t => t.id === param.taskId)\r\n        if (!task){\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n        const model: UpdateTaskModelType = {\r\n            title: task.title,\r\n            status: task.status,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            ...param.domainModel\r\n        }\r\n        try {\r\n            const res = await todolistApi.updateTask(param.todoId, param.taskId, model);\r\n            if (res.data.resultCode === 0) {\r\n                return {taskId: param.taskId, domainModel: param.domainModel, todolistId: param.todoId}\r\n            } else {\r\n                handleserverAppError(thunkAPI.dispatch, res.data)\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n        } catch (error: any){\r\n            handleServerNetworkError(thunkAPI.dispatch, error)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n})\r\n\r\nconst slice = createSlice({\r\n        name: 'tasks',\r\n        initialState: initialState,\r\n        reducers: {\r\n            // updateTaskAC: (state, action: PayloadAction<{ taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            //     const tasks = state[action.payload.todolistId];\r\n            //     const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n            //     if (index > -1) {\r\n            //         tasks[index] = {...tasks[index], ...action.payload.domainModel};\r\n            //     }\r\n            // },\r\n        },\r\n        extraReducers: (builder)=>{\r\n            builder.addCase(addTodolistTC.fulfilled, (state, action)=>{\r\n                state[action.payload.todolist.id] = [];\r\n            });\r\n            builder.addCase(removeTodolistTC.fulfilled, (state, action)=>{\r\n                delete state[action.payload.id];\r\n            });\r\n            builder.addCase(fetchTodoslistsTC.fulfilled, (state, action)=>{\r\n                action.payload.todolists.forEach((tl) => {\r\n                    state[tl.id] = [];\r\n                })\r\n            });\r\n            builder.addCase(fetchTasksTC.fulfilled, (state, action)=>{\r\n                state[action.payload.todoId] = action.payload.tasks;\r\n            });\r\n            builder.addCase(removeTaskTC.fulfilled, (state, action)=>{\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1);\r\n                }\r\n            });\r\n            builder.addCase(addTaskTC.fulfilled, (state, action)=>{\r\n                state[action.payload.todoListId].unshift(action.payload);\r\n            });\r\n            builder.addCase(updateTaskTC.fulfilled, (state, action)=>{\r\n                const tasks = state[action.payload.todolistId];\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId);\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.domainModel};\r\n                }\r\n            });\r\n        }\r\n    }\r\n)\r\n\r\nexport const tasksReducer = slice.reducer;\r\n// export const {} = slice.actions;\r\n// export const {updateTaskAC} = slice.actions;\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Button, ButtonGroup, IconButton, List, Typography} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {FilterValuesType} from './state/todolists-reducer';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\nimport {fetchTasksTC} from './state/tasks-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RequestStatusType} from './app/app-reducer';\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n\r\n    let tasksForRender: Array<TaskType> = props.tasks;\r\n    if (props.filter === 'active') {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const tasksJSXElements = tasksForRender.map(task => {\r\n        return (\r\n           <Task key={task.id}\r\n                 todolistId={props.id}\r\n                 task={task}\r\n                 removeTask={props.removeTask}\r\n                 changeTaskStatus={props.changeTaskStatus}\r\n                 changeTaskTitle={props.changeTaskTitle}/>\r\n        )\r\n    })\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.addTask, props.id]);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const filterAll = useCallback(() => props.changeFilter('all', props.id), [props.id])\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const filterActive = useCallback(() => props.changeFilter('active', props.id), [props.id])\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    const filterComplete = useCallback(() => props.changeFilter('completed', props.id), [props.id])\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"todoList\">\r\n            <Typography variant={'h6'} align={\"center\"} style={{fontWeight: 'bold'}}>\r\n                <EditableSpan title={props.title} setNewTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={() => props.removeTodolist(props.id)} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n            <List>\r\n                {tasksJSXElements}\r\n            </List>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={'contained'}\r\n                    size={'small'}\r\n                >\r\n                    <Button\r\n                        color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                        onClick={filterAll}>All\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                        onClick={filterActive}>Active\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        onClick={filterComplete}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {setAppErrorAC} from '../app/app-reducer';\r\nimport s from \"./ErrorSnackbar.module.css\"\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, String | null>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null}\r\n                  autoHideDuration={10000}\r\n                  onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" color=\"error\" sx={{width: '100%'}} className={s.alert}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LoginParamsType} from '../../api/todolist-api';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {Navigate} from 'react-router-dom';\r\nimport s from './Login.module.css';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const captchaValue = useSelector<AppRootStateType, string>(state => state.auth.captchaUrl)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: ''\r\n        },\r\n        validate: (values) => {\r\n            // const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            const errors: Partial<LoginParamsType> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password length must be 3 or longer';\r\n            }\r\n            if (captchaValue && !values.captcha) {\r\n                errors.captcha = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values));\r\n            // formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        }\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        }\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          className={s.rememberMe}\r\n                                          control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'} className={s.button}>\r\n                            Login\r\n                        </Button>\r\n                        {captchaValue &&\r\n                            <div className={s.captcha}>\r\n                                <img src={captchaValue} alt=\"\"/><br/>\r\n\r\n                                <TextField\r\n                                    label=\"Captcha\"\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps(\"captcha\")}\r\n                                    className={s.captchaInput}\r\n                                />\r\n\r\n                                {formik.errors.captcha &&\r\n                                <div style={{color: 'red'}}>{formik.errors.captcha}</div>\r\n                                }\r\n                            </div>\r\n                        }\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport TodoList from '../TodoList';\r\nimport {AddItemForm} from '../components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodoListFilterAC, changeTodolistTitleTC,\r\n    fetchTodoslistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../state/todolists-reducer';\r\nimport {addTaskTC, removeTaskTC, updateTaskTC} from '../state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {TaskStatuses, TaskType} from '../api/todolist-api';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar';\r\nimport {Login} from '../features/Login/Login';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return;\r\n        }\r\n        dispatch(fetchTodoslistsTC())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [isLoggedIn])\r\n\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n        let action = removeTaskTC({taskId:taskID, todoId:todolistID})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistID: string) => {\r\n        dispatch(addTaskTC({title, todoId:todolistID}))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todolistID: string) => {\r\n        //let action = changeTaskStatusAC(taskID,status,todolistID);\r\n        dispatch(updateTaskTC({todoId:todolistID, taskId:taskID, domainModel:{status: status}}));\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todolistID: string) => {\r\n        let action = updateTaskTC({todoId:todolistID, taskId:taskID, domainModel:{title: title}});\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        let action = changeTodoListFilterAC({id:todolistID, filter:filter});\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, todolistID: string) => {\r\n        let action = changeTodolistTitleTC({id:todolistID, title});\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        let action = removeTodolistTC(todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        let action = addTodolistTC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    const todolistsComponents = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={8} style={{padding: '20px'}}>\r\n                    <TodoList\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        entityStatus={tl.entityStatus}\r\n                        tasks={tasks[tl.id]}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar style={{justifyContent: 'space-between'}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" style={{width:\"106px\"}}>\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" variant={'outlined'} onClick={logoutHandler}>Logout</Button>}\r\n                        {!isLoggedIn && <div style={{width:\"94px\"}}/>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsBlock addTodolist={addTodolist}\r\n                                                            todolistsComponents={todolistsComponents}/>}\r\n                        />\r\n                        <Route path=\"login\" element={<Login/>}/>\r\n                        <Route path=\"404\" element={<h1 style={{textAlign: 'center'}}>404 page not found</h1>}/>\r\n                        <Route path=\"*\" element={<Navigate to={\"404\"}/>}/>\r\n                    </Routes>\r\n                </Container>\r\n\r\n                <ErrorSnackbar/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype TodolistsBlockPropsType = {\r\n    addTodolist: (title: string) => void\r\n    todolistsComponents: JSX.Element[]\r\n}\r\n\r\nconst TodolistsBlock = (props:TodolistsBlockPropsType) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '29px 0px'}}>\r\n                <AddItemForm addItem={props.addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {props.todolistsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from '../app/app-reducer';\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\nimport {configureStore} from '@reduxjs/toolkit';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\n// window.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <AppWithRedux/>\r\n        </HashRouter>\r\n    </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMe\":\"Login_rememberMe__3xNMV\",\"button\":\"Login_button__vDBYk\",\"captcha\":\"Login_captcha__2sa_V\",\"captchaInput\":\"Login_captchaInput__1s6gy\"};"],"sourceRoot":""}