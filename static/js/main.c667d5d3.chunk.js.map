{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","Task.tsx","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.tsx","state/tasks-reducer.ts","TodoList.tsx","state/todolists-reducer.ts","components/ErrorSnackbar.tsx","features/Login/Login.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","style","width","size","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","disabled","entityStatus","IconButton","onClick","color","AddBox","fontSize","EditableSpan","editMode","setEditMode","onBlur","setNewTitle","autoFocus","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","post","todolistId","delete","params","taskId","model","put","authAPI","data","Task","ListItem","disableGutters","className","task","status","Completed","divider","display","justifyContent","padding","Checkbox","e","changeTaskStatus","id","checked","New","changeTaskTitle","removeTask","Delete","handleServerNetworkError","dispatch","message","setAppErrorAC","setAppStatusAC","handleserverAppError","messages","length","initialState","isLoggedIn","setIsLoggedInAC","type","isInitialized","TodoList","useEffect","todoId","then","res","tasks","items","setTasksAC","useDispatch","tasksForRender","filter","t","tasksJSXElements","map","addTask","useCallback","filterAll","changeFilter","filterActive","filterComplete","Typography","align","fontWeight","changeTodolistTitle","removeTodolist","List","ButtonGroup","Button","Alert","forwardRef","ref","elevation","ErrorSnackbar","useSelector","state","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resultCode","catch","err","resetForm","to","container","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","TodolistsBlock","Grid","addTodolist","spacing","todolistsComponents","AppWithRedux","finally","todolists","getState","todos","taskID","todolistID","action","removeTaskAC","addTaskTC","find","deadline","description","priority","startDate","changeTaskStatusAC","updateTaskStatusThunk","changeTaskTitleAC","changeTodoListFilterAC","changeTodoListAC","todolist","addTodolistTC","position","top","textAlign","CircularProgress","tl","Paper","AppBar","Toolbar","edge","Menu","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","todoListId","newState","copyState","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.c667d5d3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\" : \"419c229b-43d4-438c-9dc1-973ee316752b\"\r\n    }\r\n})\r\n\r\nexport const todolistApi = {\r\n    getTodolists(){\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    createTodolist(title: string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(params: {todolistId: string, title: string}){\r\n        return instance.put<ResponseType>(`todo-lists/${params.todolistId}`, {title: params.title})\r\n    },\r\n    getTasks(todolistId: string){\r\n        return instance.get<ResponseTaskType>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(params: {title: string, todolistId: string}){\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${params.todolistId}/tasks`, {title: params.title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"auth/login\", data)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{ dat: ResponseMeType }>>(\"/auth/me\")\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>(\"auth/login\")\r\n    }\r\n\r\n}\r\n\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    capcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<T = {}> = {\r\n    fieldsError: Array<string>\r\n    messages: Array<string>\r\n    resultCode: number\r\n    data: T\r\n}\r\n\r\nexport enum TaskStatuses {\r\n   New ,\r\n   InProgress,\r\n   Completed,\r\n   Draft\r\n}\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    High,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype ResponseTaskType = {\r\n    error: string\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport {Button, IconButton, TextField} from '@material-ui/core';\r\nimport {Add, AddBox} from '@material-ui/icons';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title:string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {                  // string with any value true and empty string is false\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    };\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false);\r\n    }\r\n\r\n    const addTaskUsingEnter = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                style={{width:\"180px\"}}\r\n                size={'small'}\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={addTaskUsingEnter}\r\n                label={\"Title\"}\r\n                error={error}\r\n                helperText={error && \"title is required!\"}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n{/*            <input\r\n                style={error ? errorInputStyle : undefined}\r\n                className={error ? 'error' : ''}\r\n                value={title}\r\n                placeholder=\"Enter a value...\"\r\n                onChange={changeTitle}\r\n                onKeyPress={addTaskUsingEnter}\r\n            />*/}\r\n            <IconButton onClick={addItem} color={\"primary\"} size={\"small\"} disabled={props.entityStatus === 'loading'}>\r\n                <AddBox fontSize={\"large\"}/>\r\n            </IconButton>\r\n            {/*{errorMessage}*/}\r\n        </div>\r\n    )\r\n})\r\n","import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    setNewTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.setNewTitle(title);\r\n    }\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                style={{width: '130px'}}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n                onChange={changeTitle}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox, IconButton, ListItem} from '@material-ui/core';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\n\r\n\r\nexport type TaskPropsType ={\r\n    task: TaskType\r\n    todolistId:string\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n    const removeTask = () => props.removeTask(props.task.id, props.todolistId);\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ?\r\n            TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const changeTitle = (title: string) => {\r\n        props.changeTaskTitle(props.task.id, title, props.todolistId)\r\n    }\r\n\r\n    return (\r\n        <ListItem\r\n            disableGutters\r\n            className={props.task.status === TaskStatuses.Completed ? 'is-Done' : ''}\r\n            divider\r\n            key={props.task.id}\r\n            style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                padding: \"0px\"\r\n            }}\r\n        >\r\n            <Checkbox\r\n                color={\"primary\"}\r\n                onChange={changeStatus}\r\n                checked={props.task.status === TaskStatuses.Completed}\r\n            />\r\n            <EditableSpan title={props.task.title} setNewTitle={changeTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})","import { Dispatch } from 'redux';\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport { ResponseType } from '../api/todolist-api';\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleserverAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport { SetAppErrorAT, setAppStatusAC, SetAppStatusAT } from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType, TaskType, todolistApi} from '../../api/todolist-api';\r\nimport {handleserverAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {AxiosError} from 'axios';\r\nimport {addTaskAC} from '../../state/tasks-reducer';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleserverAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            }\r\n        )\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedInAC(false))\r\n            } else {\r\n                handleserverAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            }\r\n        )\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusAT | SetAppErrorAT\r\n","import {authAPI} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'succeeded' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type SetAppStatusAT = {\r\n    type: 'APP/SET-STATUS'\r\n    status: RequestStatusType\r\n}\r\nexport type SetAppErrorAT = {\r\n    type: 'APP/SET-ERROR'\r\n    error: string | null\r\n}\r\nexport type SetIsInitializedAT = ReturnType<typeof setIsInitializedAC>\r\nexport const setAppStatusAC = (status: RequestStatusType): SetAppStatusAT => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status\r\n    }\r\n}\r\nexport const setAppErrorAC = (error: string | null): SetAppErrorAT => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error\r\n    }\r\n}\r\nexport const setIsInitializedAC = (isInitialized: boolean) => {\r\n    return {\r\n        type: 'INITIALIZED',\r\n        isInitialized\r\n    } as const\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n            } else {\r\n            }\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\ntype AppActionsType = SetAppStatusAT | SetAppErrorAT | SetIsInitializedAT\r\n","import {AddTodoListAT, RemoveTodoListAT, SetTodosAT} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistApi, UpdateTaskModelType} from '../api/todolist-api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppRootStateType} from './store';\r\nimport {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from '../app/app-reducer';\r\nimport {TasksStateType} from '../app/AppWithRedux';\r\nimport {AxiosError} from 'axios';\r\nimport {handleserverAppError, handleServerNetworkError} from '../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport type ActionType = RemoveTaskAT | AddTaskAT | ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodoListAT\r\n    | RemoveTodoListAT | SetTodosAT | SetTasksAT | SetAppStatusAT | SetAppErrorAT;\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id != action.taskId)};\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            };\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            let newState = {...state};\r\n            delete newState[action.id];\r\n            return newState;\r\n        case 'SET_TODOS':\r\n            const copyState = {...state};\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        case 'SET_TASKS':\r\n            return {\r\n                ...state,\r\n                [action.todoId]: action.tasks\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype RemoveTaskAT = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\ntype AddTaskAT = {\r\n    type: 'ADD-TASK'\r\n    task: TaskType\r\n}\r\ntype ChangeTaskStatusAT = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    status: TaskStatuses\r\n    todolistId: string\r\n}\r\ntype ChangeTaskTitleAT = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype SetTasksAT = {\r\n    type: 'SET_TASKS'\r\n    tasks: TaskType[]\r\n    todoId: string\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskAT => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId}\r\n};\r\nexport const addTaskAC = (task: TaskType): AddTaskAT => {\r\n    return {type: 'ADD-TASK', task}\r\n};\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusAT => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, status, todolistId}\r\n};\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleAT => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n};\r\nexport const setTasksAC = (tasks: TaskType[], todoId: string): SetTasksAT => {\r\n    return {\r\n        type: 'SET_TASKS',\r\n        tasks,\r\n        todoId\r\n    }\r\n}\r\n\r\n\r\n//Thunk\r\nexport const fetchTasksTC = (todoId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.getTasks(todoId)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                let tasks = res.data.items;\r\n                dispatch(setTasksAC(tasks, todoId))\r\n            })\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todoId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.deleteTask(todoId, taskId)\r\n            .then(res => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todoId))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// enum ResponseStatusCodes {\r\n//     success = 0,\r\n//     error = 1,\r\n//     capcha = 10\r\n// }\r\n\r\n\r\nexport const addTaskTC = (title: string, todoId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.createTask({title: title, todolistId: todoId})\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                } else {\r\n                    handleserverAppError<{item: TaskType}>(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const updateTaskStatusThunk = (todoId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[todoId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const model: UpdateTaskModelType = {\r\n                title: task.title,\r\n                status: status,\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate\r\n            }\r\n            todolistApi.updateTask(todoId, taskId, model)\r\n                .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(changeTaskStatusAC(taskId, status, todoId))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {EditableSpan} from './components/EditableSpan';\r\nimport {Button, ButtonGroup, IconButton, List, Typography} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from './Task';\r\nimport {FilterValuesType, fetchTodoslistsTC} from './state/todolists-reducer';\r\nimport {TaskStatuses, TaskType} from './api/todolist-api';\r\nimport {fetchTasksTC} from './state/tasks-reducer';\r\nimport {useDispatch} from 'react-redux';\r\nimport {RequestStatusType} from './app/app-reducer';\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistID: string) => void\r\n    changeFilter: (filter: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeTaskStatus: (taskID: string, status: TaskStatuses, todolistID: string) => void\r\n    removeTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (taskID: string, title: string, todolistID: string) => void\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    let tasksForRender: Array<TaskType> = props.tasks;\r\n    if (props.filter === 'active') {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForRender = tasksForRender.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const tasksJSXElements = tasksForRender.map(task => {\r\n        return (\r\n           <Task key={task.id}\r\n                 todolistId={props.id}\r\n                 task={task}\r\n                 removeTask={props.removeTask}\r\n                 changeTaskStatus={props.changeTaskStatus}\r\n                 changeTaskTitle={props.changeTaskTitle}/>\r\n        )\r\n    })\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id]);\r\n\r\n    const filterAll = useCallback(() => props.changeFilter('all', props.id), [props.id])\r\n    const filterActive = useCallback(() => props.changeFilter('active', props.id), [props.id])\r\n    const filterComplete = useCallback(() => props.changeFilter('completed', props.id), [props.id])\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"todoList\">\r\n            <Typography variant={'h6'} align={\"center\"} style={{fontWeight: 'bold'}}>\r\n                <EditableSpan title={props.title} setNewTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={() => props.removeTodolist(props.id)} disabled={props.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </Typography>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n            <List>\r\n                {tasksJSXElements}\r\n            </List>\r\n            <div>\r\n                <ButtonGroup\r\n                    variant={'contained'}\r\n                    size={'small'}\r\n                >\r\n                    <Button\r\n                        color={props.filter === 'all' ? 'secondary' : 'primary'}\r\n                        onClick={filterAll}>All\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'active' ? 'secondary' : 'primary'}\r\n                        onClick={filterActive}>Active\r\n                    </Button>\r\n                    <Button\r\n                        color={props.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        onClick={filterComplete}>Completed\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default TodoList;","import {Dispatch} from 'redux';\r\nimport {v1} from 'uuid';\r\nimport {todolistApi, TodolistType} from '../api/todolist-api';\r\nimport {AppRootStateType} from './store';\r\nimport {RequestStatusType, setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from '../app/app-reducer';\r\nimport {addTaskAC} from './tasks-reducer';\r\nimport {AxiosError} from 'axios';\r\nimport {handleserverAppError, handleServerNetworkError} from '../utils/error-utils';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport type ActionType = RemoveTodoListAT | AddTodoListAT | ChangeTodoListAT | ChangeTodoListFilter | SetTodosAT\r\n    | SetAppStatusAT | SetAppErrorAT | ChangeTodoListEntityAT;\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id);\r\n        case 'ADD-TODOLIST':\r\n            return [{\r\n                ...action.todolist,\r\n                filter: 'all',\r\n                entityStatus: 'idle'\r\n            }, ...state];\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(t => t.id === action.id ? {...t, title: action.title} : t);\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(t => t.id === action.id ? {...t, filter: action.filter} : t)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(t => t.id === action.id ? {...t, entityStatus: action.entityStatus} : t)\r\n        case 'SET_TODOS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListAT = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist: TodolistType\r\n}\r\ntype ChangeTodoListAT = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodoListFilter = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nexport type SetTodosAT = {\r\n    type: 'SET_TODOS'\r\n    todolists: Array<TodolistType>\r\n}\r\nexport type ChangeTodoListEntityAT = {\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS'\r\n    id: string\r\n    entityStatus: RequestStatusType\r\n};\r\n\r\nexport const removeTodoListAC = (id: string): RemoveTodoListAT => {\r\n    return {type: 'REMOVE-TODOLIST', id: id}\r\n};\r\nexport const addTodoListAC = (todolist: TodolistType): AddTodoListAT => {\r\n    return {type: 'ADD-TODOLIST', todolist}\r\n}\r\nexport const changeTodoListAC = (id: string, title: string): ChangeTodoListAT => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id, title};\r\n}\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterValuesType): ChangeTodoListFilter => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id, filter};\r\n}\r\nexport const setTodosAC = (todolists: Array<TodolistType>): SetTodosAT => {\r\n    return {\r\n        type: 'SET_TODOS',\r\n        todolists\r\n    }\r\n}\r\nexport const changeTodoListEntityStatusAC = (id: string, entityStatus: RequestStatusType):ChangeTodoListEntityAT => {\r\n    return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus};\r\n}\r\n\r\n\r\nexport const fetchTodoslistsTC = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            let todos = res.data;\r\n            dispatch(setTodosAC(todos));\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistApi.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(addTodoListAC(res.data.data.item));\r\n                } else {\r\n                    handleserverAppError<{item: TodolistType}>(dispatch, res.data)\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n                    // dispatch(setAppErrorAC(err.message))\r\n                    // dispatch(setAppStatusAC('failed'))\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodoListEntityStatusAC(todolistId, 'loading'))\r\n        todolistApi.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if(res.data.resultCode === 0){\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(removeTodoListAC(todolistId))\r\n                } else {\r\n                    dispatch(setAppStatusAC('failed'))\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC('Some error occurred'))\r\n                    }\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n//\r\n\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {RequestStatusType, setAppErrorAC} from '../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, String | null>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={10000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {loginTC} from './auth-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {LoginParamsType} from '../../api/todolist-api';\r\nimport {AppRootStateType} from '../../state/store';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\n// type FormikErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"capcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password length must be 3 or longer';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>\r\n                        }\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>\r\n                        }\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                                          />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport TodoList from '../TodoList';\r\nimport {AddItemForm} from '../components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistTC,\r\n    changeTodoListAC,\r\n    changeTodoListFilterAC,\r\n    fetchTodoslistsTC,\r\n    FilterValuesType,\r\n    removeTodoListAC, removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../state/todolists-reducer';\r\nimport {addTaskTC, changeTaskTitleAC, removeTaskTC, updateTaskStatusThunk} from '../state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../state/store';\r\nimport {TaskStatuses, TaskType} from '../api/todolist-api';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar';\r\nimport {Login} from '../features/Login/Login';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn){\r\n            return;\r\n        }\r\n        dispatch(fetchTodoslistsTC())\r\n    }, [isLoggedIn])\r\n\r\n\r\n\r\n    const removeTask = useCallback((taskID: string, todolistID: string) => {\r\n        let action = removeTaskTC(taskID, todolistID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todolistID: string) => {\r\n        dispatch(addTaskTC(title, todolistID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskID: string, status: TaskStatuses, todolistID: string) => {\r\n        //let action = changeTaskStatusAC(taskID,status,todolistID);\r\n        dispatch(updateTaskStatusThunk(todolistID, taskID, status));\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todolistID: string) => {\r\n        let action = changeTaskTitleAC(taskID, title, todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((filter: FilterValuesType, todolistID: string) => {\r\n        let action = changeTodoListFilterAC(todolistID, filter);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, todolistID: string) => {\r\n        let action = changeTodoListAC(todolistID, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback((todolistID: string) => {\r\n        let action = removeTodolistTC(todolistID);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n    const addTodolist = useCallback((title: string) => {\r\n        let action = addTodolistTC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    const todolistsComponents = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={8} style={{padding: '20px'}}>\r\n                    <TodoList\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        entityStatus={tl.entityStatus}\r\n                        tasks={tasks[tl.id]}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodolist={removeTodolist}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"App\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar style={{justifyContent: 'space-between'}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" variant={'outlined'} onClick={logoutHandler}>Logout</Button>}\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsBlock addTodolist={addTodolist}\r\n                                                            todolistsComponents={todolistsComponents}/>}\r\n                        />\r\n                        <Route path=\"login\" element={<Login/>}/>\r\n                        <Route path=\"404\" element={<h1 style={{textAlign: 'center'}}>404 page not found</h1>}/>\r\n                        <Route path=\"*\" element={<Navigate to={\"404\"}/>}/>\r\n                    </Routes>\r\n                </Container>\r\n\r\n                <ErrorSnackbar/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype TodolistsBlockPropsType = {\r\n    addTodolist: (title: string) => void\r\n    todolistsComponents: JSX.Element[]\r\n}\r\n\r\nconst TodolistsBlock = (props:TodolistsBlockPropsType) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '29px 0px'}}>\r\n                <AddItemForm addItem={props.addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={4}>\r\n                {props.todolistsComponents}\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from '../app/app-reducer';\r\nimport {TypedUseSelectorHook, useSelector} from 'react-redux';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <AppWithRedux/>\r\n        </BrowserRouter>\r\n    </Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}